𝐐𝐮𝐞𝐬𝐭𝐢𝐨𝐧 :
You are given the head of a linked list, which contains a series of integers separated by 0's. The beginning and end of the linked list will have Node.val == 0.

For every two consecutive 0's, merge all the nodes lying in between them into a single node whose value is the sum of all the merged nodes. The modified list should not contain any 0's.

Return the head of the modified linked list.

 

Example 1:


Input: head = [0,3,1,0,4,5,2,0]
Output: [4,11]
Explanation: 
The above figure represents the given linked list. The modified list contains
- The sum of the nodes marked in green: 3 + 1 = 4.
- The sum of the nodes marked in red: 4 + 5 + 2 = 11.
Example 2:


Input: head = [0,1,0,3,0,2,2,0]
Output: [1,3,4]
Explanation: 
The above figure represents the given linked list. The modified list contains
- The sum of the nodes marked in green: 1 = 1.
- The sum of the nodes marked in red: 3 = 3.
- The sum of the nodes marked in yellow: 2 + 2 = 4.
 

Constraints:

The number of nodes in the list is in the range [3, 2 * 105].
0 <= Node.val <= 1000
There are no two consecutive nodes with Node.val == 0.
The beginning and end of the linked list have Node.val == 0.


𝐀𝐧𝐬𝐰𝐞𝐫:

# Definition for singly-linked list.
class ListNode(object):
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

class Solution(object):
    def mergeNodes(self, head):
        """
        :type head: Optional[ListNode]
        :rtype: Optional[ListNode]
        """
        dummy = ListNode(0)
        current_result = dummy
        current = head.next  # Skip the first zero
        sum_val = 0
        
        while current:
            if current.val == 0:
                current_result.next = ListNode(sum_val)
                current_result = current_result.next
                sum_val = 0
            else:
                sum_val += current.val
            current = current.next
        
        return dummy.next

# Helper function to create a linked list from a list
def create_linked_list(lst):
    dummy = ListNode(0)
    current = dummy
    for val in lst:
        current.next = ListNode(val)
        current = current.next
    return dummy.next

# Helper function to convert linked list to a list (for easy checking)
def linked_list_to_list(head):
    result = []
    while head:
        result.append(head.val)
        head = head.next
    return result

# Example usage:
solution = Solution()

# Example 1
head1 = create_linked_list([0, 3, 1, 0, 4, 5, 2, 0])
result1 = solution.mergeNodes(head1)
print(linked_list_to_list(result1))  # Output: [4, 11]

# Example 2
head2 = create_linked_list([0, 1, 0, 3, 0, 2, 2, 0])
result2 = solution.mergeNodes(head2)
print(linked_list_to_list(result2))  # Output: [1, 3, 4]





