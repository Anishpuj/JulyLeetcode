class Solution:
    def buildMatrix(self, k, rowConditions, colConditions):
        from collections import defaultdict, deque

        def topological_sort(edges):
            indegree = dict((i, 0) for i in range(1, k+1))
            graph = defaultdict(list)
            
            for u, v in edges:
                graph[u].append(v)
                indegree[v] += 1
            
            queue = deque([node for node in indegree if indegree[node] == 0])
            order = []
            
            while queue:
                node = queue.popleft()
                order.append(node)
                for neighbor in graph[node]:
                    indegree[neighbor] -= 1
                    if indegree[neighbor] == 0:
                        queue.append(neighbor)
            
            if len(order) == k:
                return order
            else:
                return []

        rowOrder = topological_sort(rowConditions)
        colOrder = topological_sort(colConditions)

        if not rowOrder or not colOrder:
            return []

        rowPos = dict((num, i) for i, num in enumerate(rowOrder))
        colPos = dict((num, i) for i, num in enumerate(colOrder))

        matrix = [[0] * k for _ in range(k)]

        for num in range(1, k+1):
            r = rowPos[num]
            c = colPos[num]
            matrix[r][c] = num

        return matrix

# Example usage:
solution = Solution()
k = 3
rowConditions = [[1, 2], [3, 2]]
colConditions = [[2, 1], [3, 2]]
print(solution.buildMatrix(k, rowConditions, colConditions))
